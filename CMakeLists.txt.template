# Top-level CMakeLists.txt

# Mandatory
# set minimum requirement of cmake
cmake_minimum_required(VERSION <version>)
message(STATUS "Building using CMake version : ${CMAKE_VERSION}")

# set project infos
project(<project_name>
        VERSION     <version>
        LANGUAGE    <language>
)

# Build configuration
# if no build type specified, default to release builds
if(NOT DEFINED CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE
      Release     
      CACHE STRING "Choose the type of build.")
endif()
string(TOLOWER ${CMAKE_BUILD_TYPE} LOWERCASE_BUILD_TYPE)
string(TOUPPER ${CMAKE_BUILD_TYPE} UPPERCASE_BUILD_TYPE)

# set project name and its languages in use
project(${PROJECT_NAME} LANGUAGES C CXX)

# set directories
set(abc_INSTALL_BINDIR "bin" CACHE STRING "Directory of executables")
set(abc_INSTALL_LIBDIR "lib" CACHE STRING "Directory of libraries")
set(abc_INSTALL_INCLUDEDIR "include" CACHE STRING "Directory of headers")

# set options
option(abc_BUILD_TESTS "Build tests" OFF)
set(abc_INSTALL_default ON)
# Disable the installation when building as a submodule
if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
    set(abc_INSTALL_default OFF)
endif()

# C++ version (11) and flags
if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
elseif(CMAKE_CXX_STANDARD LESS 11)
    message(FATAL_ERROR "The standard version of C++ is set lower than 11")
endif()

# using packages
find_package(InferTools)

# checking if the package is found
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
else()
    message(FATAL_ERROR "Cannot find BOOST)
endif()

# implement subdirectories
add_subdirectory(${SOURCE_DIR} ${BINARY_DIR})

# set executable
# The executable includes following sources
add_executable(executable
    ${directory}/including_files.cc
)

# include directories for executable
target_include_directories(
    PRIVATE
    ${directories}
)

# libraries linked to executable 
target_link_libraries(thirdparty_include
    PRIVATE 
    Boost::filesystem
)

# Option : if build test activated
if(abc_BUILD_TESTS)
    
endif()

# install external libraries -> make thirdparty cmake module (e.g. ThirdpartyToolchain.cmake)
include(ExternalProject)
ExternalProject_Add{install_name
        # URL/GIT/SVN ...
        # URL_HASH "SHA256=${PROJECTNAME_LIBRARYNAME_BUILD_SHA256_CHECKSUM}"
        CONFIGURE_COMMAND ${LIB_CONFIGURE_COMMAND}
        BUILD_COMMAND ${LIB_BUILD_COMMAND}
        INSTALL_COMMAND "" ${OPTIONS}
)
# Version details on versions.txt located in /thirdparty
# add_dependencies() on newly installed libraries : highly recommended 

# 